#!python
from __future__ import print_function
import os, sys, subprocess, itertools, re

dest, target = sys.argv[1:]
os.chdir(os.path.dirname(target))


prebuild_targets = []
try:
	with open('prebuild.targets') as t:
		prebuild_targets = t.read().split()
except OSError, e:
	if e.errno != errno.ENOENT:
		raise

if prebuild_targets:
	subprocess.check_call(['gup', '-u', 'prebuild.targets'] + prebuild_targets)
subprocess.check_call(['gup', '-u', '.configure'])


makefile = os.path.join('.configure', 'Makefile')
with open(dest, 'w') as output:
	with open(makefile) as f:
		lines = f.read().splitlines()

	is_empty = lambda line: len(line.strip()) == 0
	targets = itertools.groupby(lines, is_empty)
	for (empty, lines) in targets:
		if empty:
			continue
		lines = map(lambda line: line.rstrip('\\').strip(), lines)
		lines = filter(lambda line: not line.startswith('#'), lines)
		lines = list(lines)
		if not lines: continue
		re_target = re.compile('^([^: ]+):+')
		re_assignment = re.compile('^([^ ]+) *(\+?=) *(.*)$')
		def process_target(name):
			if name == 'build':
				# XXX should really just join on ine continuations
				args = ' '.join(lines[1:]).split()
				# print(repr(args))
				lib_args = list(filter(lambda arg: arg.startswith('-l'), args))
				print("PASSE_LDFLAGS='%s'" % ' '.join(lib_args), file=output)
			else:
				print("Ignoring target %s" % name)
		def process_var(name, op, val):
			if name == 'LIBS':
				val = re.sub('-pkgs *', '', val)
				print("PASSE_PKGS='%s'" % val, file=output)
			else:
				print("ignoring var %s %s %s" % (name, op, val))
		def ignore(*a): pass
		operations = [
			(re_target, process_target),
			(re_assignment, process_var),
			(re.compile('^export '), ignore),
			(re.compile('^-include '), ignore),
		]
		for pattern, fn in operations:
			match = pattern.match(lines[0])
			if match is not None:
				# print(repr(match.groups()))
				fn(*match.groups())
				break
		else:
			assert False, "unknown line: " + lines[0]
		# print(repr(lines), file=output)

